// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// user configs

enum TimeRange {
  DAY
  WEEK
  MONTH
}

type ConfigBody {
  location             String
  timeRange            TimeRange
  listOfSearchKeywords String[]
  titleIncludes        String[]
  titleExcludes        String[]
  priorityList         Json // Prisma uses Json for dictionaries/maps
}

model Config {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  name   String
  body   ConfigBody
}

enum Source {
  LINKEDIN
}

// archived jobs

type JobBody {
  title          String
  company        String
  href           String
  location       String
  priorityPoints Int
  priorityHits   String[]
  description    String
}

model Job {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  key       String  @unique
  userId    String
  date      String
  source    Source
  body      JobBody
  archiveId String  @db.ObjectId
  archive   Archive @relation(fields: [archiveId], references: [id])
}

model Archive {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  name   String
  jobs   Job[]
}
